scalar DateTime

type User {
  id: String!
  username: String!
  name: String
  nickname: String
  bio: String
  job: String
  # Direct URL to user's avatar images
  avatar: String
  # Is this a public figure?
  #isFigure: Boolean!
  # Was this public figure claim their account?
  #isFigureClaimed: Boolean!
  tikiLink: String

  recommendBooks: [RecommendBooks]

  createdAt: String
  updatedAt: String
}
type BookLinks {
  tiki: String
  amz: String
  vnb: String
}
type Book {
  # A book id
  id: String!
  # Book slug for display in url
  slug: String!
  name: String!
  author: String!
  abstract: String
  cover: String!
  links: BookLinks!
  recommendBy: [RecommendBy]
  createdAt: DateTime
  updatedAt: DateTime
}

# A book was recommended by many user
type RecommendBy {
  user: User!
  content: String
  
  createdAt: DateTime
  updatedAt: DateTime
}

# A user has recommended many books
type RecommendBooks {
  book: Book!
  content: String
  
  createdAt: DateTime
  updatedAt: DateTime
}

type Mutation {
  addBook(name: String!, author: String!): Book
}

type QueryMeta {
  count: Int!
}

type Pagination {
  offset: Int!, 
  limit: Int!
  rowCount: Int!
  pageCount: Int!
}

type UsersQueryOutput {
  edges: [User]!
  pagination: Pagination
}

type Query {
  Book(id: String!): Book
  User(username: String!): User

  allBooks(offset: Int, limit: Int): [Book]!
  allUsers(offset: Int!, limit: Int!, orderBy: String): UsersQueryOutput!
  allFeaturedFigures(offset: Int!, limit: Int!): UsersQueryOutput!
}